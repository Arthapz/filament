material {
    name : DepthOfField,
    parameters : [
        {
           type : sampler2d,
           name : uTexture,
           precision: medium
        },
        {
           type : sampler2d,
           name : uDepth,
           precision: medium
        },
        {
            type : float2,
            name : depthParams,
            precision: high
        },
        {
           type : float2,
           name : uPixelSize
        },
        {
           type : float,
           name : focusPoint
        },
        {
           type : float,
           name : focusScale
        }
    ],
    variables : [
        vertex
    ],
    domain : postprocess,
    depthWrite : false,
    depthCulling : false
}

vertex {
    void postProcessVertex(inout PostProcessVertexInputs postProcess) {
        postProcess.vertex.xy = postProcess.normalizedUV;
    }
}

fragment {

const float GOLDEN_ANGLE = 2.39996323;
const float MAX_BLUR_SIZE = 20.0;
const float RAD_SCALE = 0.5; // Smaller = nicer blur, larger = faster

void foo() {}  // twart the IDE

highp float linearizeDepth(highp float depth) {
    // Our far plane is at infinity, which causes a division by zero below, which in turn
    // causes some issues on some GPU. We workaround it by replacing "infinity" by the closest
    // value representable in  a 24 bit depth buffer.
    const float preventDiv0 = -1.0 / 16777216.0;
    return materialParams.depthParams.x / min(depth + materialParams.depthParams.y, preventDiv0);
}

float getBlurSize(float depth, float focusPoint, float focusScale) {
    float coc = clamp((1.0 / focusPoint - 1.0 / depth) * focusScale, -1.0, 1.0);
    return abs(coc) * MAX_BLUR_SIZE;
}

vec3 depthOfField(vec2 texCoord, float focusPoint, float focusScale) {
    float centerDepth = -linearizeDepth(textureLod(materialParams_uDepth, texCoord, 0.0).r);
    float centerSize = getBlurSize(centerDepth, focusPoint, focusScale);
    vec3 color = textureLod(materialParams_uTexture, texCoord, 0.0).rgb;
    float tot = 1.0;
    float radius = RAD_SCALE;
    for (float ang = 0.0; radius<MAX_BLUR_SIZE; ang += GOLDEN_ANGLE) {
        vec2 tc = texCoord + vec2(cos(ang), sin(ang)) * materialParams.uPixelSize * radius;
        vec3 sampleColor = textureLod(materialParams_uTexture, tc, 0.0).rgb;
        float sampleDepth = -linearizeDepth(textureLod(materialParams_uDepth, tc, 0.0).r);
        float sampleSize = getBlurSize(sampleDepth, focusPoint, focusScale);
        if (sampleDepth > centerDepth) {
            sampleSize = clamp(sampleSize, 0.0, centerSize * 2.0);
        }
        float m = smoothstep(radius-0.5, radius+0.5, sampleSize);
        color += mix(color/tot, sampleColor, m);
        tot += 1.0;
        radius += RAD_SCALE/radius;
    }
    return color / tot;
}

void postProcess(inout PostProcessInputs postProcess) {
    highp vec2 uv = variable_vertex.xy;
    postProcess.color.rgb = depthOfField(uv, materialParams.focusPoint, materialParams.focusScale);
}

}
